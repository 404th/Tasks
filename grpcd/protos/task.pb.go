// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Task struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Tasks struct {
	Tasks                []*Task  `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tasks) Reset()         { *m = Tasks{} }
func (m *Tasks) String() string { return proto.CompactTextString(m) }
func (*Tasks) ProtoMessage()    {}
func (*Tasks) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{1}
}

func (m *Tasks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tasks.Unmarshal(m, b)
}
func (m *Tasks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tasks.Marshal(b, m, deterministic)
}
func (m *Tasks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tasks.Merge(m, src)
}
func (m *Tasks) XXX_Size() int {
	return xxx_messageInfo_Tasks.Size(m)
}
func (m *Tasks) XXX_DiscardUnknown() {
	xxx_messageInfo_Tasks.DiscardUnknown(m)
}

var xxx_messageInfo_Tasks proto.InternalMessageInfo

func (m *Tasks) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type WithID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithID) Reset()         { *m = WithID{} }
func (m *WithID) String() string { return proto.CompactTextString(m) }
func (*WithID) ProtoMessage()    {}
func (*WithID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{2}
}

func (m *WithID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithID.Unmarshal(m, b)
}
func (m *WithID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithID.Marshal(b, m, deterministic)
}
func (m *WithID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithID.Merge(m, src)
}
func (m *WithID) XXX_Size() int {
	return xxx_messageInfo_WithID.Size(m)
}
func (m *WithID) XXX_DiscardUnknown() {
	xxx_messageInfo_WithID.DiscardUnknown(m)
}

var xxx_messageInfo_WithID proto.InternalMessageInfo

func (m *WithID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{3}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Task)(nil), "protos.Task")
	proto.RegisterType((*Tasks)(nil), "protos.Tasks")
	proto.RegisterType((*WithID)(nil), "protos.WithID")
	proto.RegisterType((*Empty)(nil), "protos.Empty")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xd9, 0xdd, 0x26, 0xe2, 0xd4, 0xf6, 0x30, 0x78, 0x08, 0x7b, 0x2a, 0x11, 0x64, 0x41,
	0xe8, 0xa1, 0xbe, 0x80, 0x62, 0xa5, 0x78, 0xf1, 0x50, 0x15, 0xcf, 0xa9, 0x19, 0x30, 0x34, 0x65,
	0x97, 0xcd, 0x20, 0xf4, 0x3d, 0x7d, 0x20, 0x49, 0x62, 0xc1, 0xae, 0x87, 0x9e, 0x92, 0xff, 0x9f,
	0xc9, 0xf7, 0x41, 0x00, 0xd8, 0x84, 0xed, 0xbc, 0xeb, 0x5b, 0x6e, 0x51, 0xa6, 0x23, 0xe8, 0x3b,
	0x18, 0xbd, 0x9a, 0xb0, 0xc5, 0x29, 0x94, 0xce, 0xaa, 0x62, 0x56, 0x34, 0xe7, 0xeb, 0xd2, 0x59,
	0xbc, 0x04, 0xc1, 0x8e, 0x3d, 0xa9, 0x32, 0x55, 0x39, 0x20, 0xc2, 0x68, 0xd3, 0xda, 0xbd, 0xaa,
	0x52, 0x99, 0xee, 0xfa, 0x06, 0x44, 0x24, 0x04, 0xd4, 0x20, 0xa2, 0x20, 0xa8, 0x62, 0x56, 0x35,
	0xe3, 0xc5, 0x45, 0x36, 0x85, 0x79, 0x9c, 0xae, 0xf3, 0x48, 0x2b, 0x90, 0xef, 0x8e, 0x3f, 0x9f,
	0x96, 0x43, 0xa1, 0x3e, 0x03, 0xf1, 0xb8, 0xeb, 0x78, 0xbf, 0xf8, 0x2e, 0x60, 0xfc, 0x42, 0xfd,
	0x97, 0xfb, 0xa0, 0x67, 0xb3, 0x23, 0xbc, 0x06, 0xf9, 0xd0, 0x93, 0x61, 0xc2, 0x23, 0x62, 0x3d,
	0x3d, 0xa4, 0x5f, 0xe0, 0x15, 0x54, 0x2b, 0x62, 0x1c, 0xd4, 0xf5, 0xd1, 0xa3, 0x08, 0x5b, 0x11,
	0xdf, 0x7b, 0x8f, 0x93, 0x43, 0x9f, 0xac, 0xf5, 0xe4, 0xef, 0x5a, 0x88, 0x7b, 0x6f, 0x9d, 0x3d,
	0x2d, 0x6d, 0x40, 0x2e, 0xc9, 0x13, 0xd3, 0x3f, 0xef, 0x20, 0x6f, 0xf2, 0x87, 0xdf, 0xfe, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x31, 0x03, 0x1e, 0x14, 0x85, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceNameClient is the client API for ServiceName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceNameClient interface {
	Create(ctx context.Context, in *Task, opts ...grpc.CallOption) (*WithID, error)
	Get(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Task, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error)
	Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*WithID, error)
	Delete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*WithID, error)
}

type serviceNameClient struct {
	cc *grpc.ClientConn
}

func NewServiceNameClient(cc *grpc.ClientConn) ServiceNameClient {
	return &serviceNameClient{cc}
}

func (c *serviceNameClient) Create(ctx context.Context, in *Task, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/protos.ServiceName/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) Get(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/protos.ServiceName/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/protos.ServiceName/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/protos.ServiceName/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) Delete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/protos.ServiceName/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceNameServer is the server API for ServiceName service.
type ServiceNameServer interface {
	Create(context.Context, *Task) (*WithID, error)
	Get(context.Context, *WithID) (*Task, error)
	GetAll(context.Context, *Empty) (*Tasks, error)
	Update(context.Context, *Task) (*WithID, error)
	Delete(context.Context, *WithID) (*WithID, error)
}

// UnimplementedServiceNameServer can be embedded to have forward compatible implementations.
type UnimplementedServiceNameServer struct {
}

func (*UnimplementedServiceNameServer) Create(ctx context.Context, req *Task) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedServiceNameServer) Get(ctx context.Context, req *WithID) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedServiceNameServer) GetAll(ctx context.Context, req *Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedServiceNameServer) Update(ctx context.Context, req *Task) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedServiceNameServer) Delete(ctx context.Context, req *WithID) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterServiceNameServer(s *grpc.Server, srv ServiceNameServer) {
	s.RegisterService(&_ServiceName_serviceDesc, srv)
}

func _ServiceName_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ServiceName/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Create(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ServiceName/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Get(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ServiceName/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ServiceName/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Update(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ServiceName/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).Delete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ServiceName",
	HandlerType: (*ServiceNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceName_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ServiceName_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ServiceName_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServiceName_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceName_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
